generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id            String        @id @default(cuid())
  name          String
  players       Player[]
  homeMatches   Match[]      @relation("HomeTeam")
  awayMatches   Match[]      @relation("AwayTeam")
  matchPoints   MatchPoints[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Player {
  id            String   @id @default(cuid())
  name          String
  playerType    String   @default("PRIMARY") // Can be "PRIMARY" or "SUB"
  handicapIndex Float    @default(0)
  handicap      Float?   // Added handicap field as optional Float
  team          Team?    @relation(fields: [teamId], references: [id])
  teamId        String?
  scores        MatchScore[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  matchPlayers  MatchPlayer[] // Relation to match-specific assignments

  @@index([teamId])
}

model Match {
  id            String        @id @default(cuid())
  date          DateTime
  weekNumber    Int
  homeTeam      Team         @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId    String
  awayTeam      Team         @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId    String
  scores        MatchScore[]
  points        MatchPoints[]
  status        String       @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED
  startingHole  Int         @default(1) @db.SmallInt
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  matchPlayers  MatchPlayer[] // Relation to match-specific player assignments
}

model MatchScore {
  id        String   @id @default(cuid())
  match     Match    @relation(fields: [matchId], references: [id])
  matchId   String
  player    Player   @relation(fields: [playerId], references: [id])
  playerId  String
  hole      Int      @db.SmallInt
  score     Int      @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([matchId, playerId, hole])
}

model MatchPoints {
  id         String   @id @default(cuid())
  match      Match    @relation(fields: [matchId], references: [id])
  matchId    String
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     String
  points     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([matchId, teamId])
}

// New model for match-specific player assignments
model MatchPlayer {
  id            String   @id @default(cuid())
  matchId       String
  match         Match    @relation(fields: [matchId], references: [id])
  playerId      String
  player        Player   @relation(fields: [playerId], references: [id])
  substituteFor String?  // ID of the player being substituted, null if not a substitute
  isSubstitute  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([matchId, playerId])
}

enum PlayerType {
  PRIMARY
  SUBSTITUTE
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
} 