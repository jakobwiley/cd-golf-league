generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id            String        @id
  name          String
  players       Player[]
  homeMatches   Match[]      @relation("HomeTeam")
  awayMatches   Match[]      @relation("AwayTeam")
  matchPoints   MatchPoints[] @relation("TeamPoints")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Player {
  id            String       @id
  name          String
  team          Team?        @relation(fields: [teamId], references: [id])
  teamId        String?
  playerType    String       @default("PRIMARY") // PRIMARY, SUBSTITUTE
  handicapIndex Float
  handicap      Int?
  scores        MatchScore[] @relation("PlayerScores")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  substitutions PlayerSubstitution[] @relation("SubstitutePlayer")
}

model Match {
  id            String       @id
  date          DateTime
  weekNumber    Int
  homeTeam      Team        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId    String
  awayTeam      Team        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId    String
  scores        MatchScore[] @relation("MatchScores")
  points        MatchPoints[] @relation("MatchPoints")
  status        String       @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED
  startingHole  Int         @default(1)
  substitutions PlayerSubstitution[] @relation("MatchSubstitutions")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model MatchScore {
  id            String   @id @default(cuid())
  match         Match    @relation("MatchScores", fields: [matchId], references: [id])
  matchId       String
  player        Player   @relation("PlayerScores", fields: [playerId], references: [id])
  playerId      String
  hole          Int
  score         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([matchId, playerId, hole])
}

model MatchPoints {
  id            String   @id @default(cuid())
  match         Match    @relation("MatchPoints", fields: [matchId], references: [id])
  matchId       String
  team          Team     @relation("TeamPoints", fields: [teamId], references: [id])
  teamId        String
  points        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([matchId, teamId])
}

model PlayerSubstitution {
  id            String   @id @default(cuid())
  match         Match    @relation("MatchSubstitutions", fields: [matchId], references: [id])
  matchId       String
  player        Player   @relation("SubstitutePlayer", fields: [playerId], references: [id])
  playerId      String
  hole          Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([matchId, playerId, hole])
}

enum PlayerType {
  PRIMARY
  SUBSTITUTE
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
} 