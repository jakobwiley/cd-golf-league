generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id          String        @id @default(cuid())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  awayMatches Match[]       @relation("AwayTeam")
  homeMatches Match[]       @relation("HomeTeam")
  matchPoints MatchPoints[]
  players     Player[]
}

model Player {
  id                String        @id @default(cuid())
  name              String
  teamId            String?
  handicapIndex     Float         @default(0)
  handicap          Float?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  playerType        String        @default("PRIMARY")
  matchPlayers      MatchPlayer[]
  scores            MatchScore[]
  team              Team?         @relation(fields: [teamId], references: [id])
  originalSubstitutions PlayerSubstitution[] @relation("OriginalPlayer")
  substituteSubstitutions PlayerSubstitution[] @relation("SubstitutePlayer")

  @@index([teamId])
}

model Match {
  id           String        @id @default(cuid())
  date         DateTime
  weekNumber   Int
  homeTeamId   String
  awayTeamId   String
  startingHole Int          @default(1) @db.SmallInt
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  status       String       @default("SCHEDULED")
  awayTeam     Team         @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam     Team         @relation("HomeTeam", fields: [homeTeamId], references: [id])
  matchPlayers MatchPlayer[]
  points       MatchPoints[]
  scores       MatchScore[]
  substitutions PlayerSubstitution[]
}

model MatchScore {
  id        String   @id @default(cuid())
  matchId   String
  playerId  String
  hole      Int      @db.SmallInt
  score     Int      @db.SmallInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  match     Match    @relation(fields: [matchId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId, hole])
}

model MatchPoints {
  id        String   @id @default(cuid())
  matchId   String
  teamId    String
  points    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  match     Match    @relation(fields: [matchId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([matchId, teamId])
}

model MatchPlayer {
  id            String   @id @default(cuid())
  matchId       String
  playerId      String
  substituteFor String?
  isSubstitute  Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  match         Match    @relation(fields: [matchId], references: [id])
  player        Player   @relation(fields: [playerId], references: [id])

  @@unique([matchId, playerId])
}

model PlayerSubstitution {
  id                String   @id @default(cuid())
  matchId          String
  originalPlayerId String
  substitutePlayerId String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  match            Match    @relation(fields: [matchId], references: [id])
  originalPlayer   Player   @relation("OriginalPlayer", fields: [originalPlayerId], references: [id])
  substitutePlayer Player   @relation("SubstitutePlayer", fields: [substitutePlayerId], references: [id])

  @@unique([matchId, originalPlayerId])
}

enum PlayerType {
  PRIMARY
  SUBSTITUTE
}

enum MatchStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
}
